from typing import Literal
from socket import AddressFamily, SocketKind


"""
Patron Fadate:
Clase que se encarga de la conexión con el servidor, envío de mensajes y cierre de la conexión y liberación de todos los recursos

Hace uso del protocolo Context Manager para manejar la conexión de manera segura y cerrarla en caso de error

Siempre usar la sentencia with para manejar la conexión
"""
class ClientSocket():
    """
    Interfaz de socket cliente para enviar mensajes a un servidor
    """
    def __init__(self, IP: str, PUERTO: int, FAMILY_SC: AddressFamily=AddressFamily.AF_INET, TIPO_SC: SocketKind=SocketKind.SOCK_STREAM) -> None:
        """
        Inicializa el socket del cliente
        """
    def __enter__(self) -> ClientSocket: ...
    def __exit__(self, exc_type, exc_value, traceback) -> Literal[False]: ...
    def _log_exception(self, exception: Exception) -> None: ...
    def _cleanup_resources(self) -> None: ...
    def _retry_close(self) -> None: ...
    def _protocolo_enviar_mensaje(self, mensaje_serializado) -> None: ...
    def _protocolo_recibir_mensaje(self) -> None: ...
    def enviar_solicitud_busqueda(self, buscar) -> None: ...
    def confirmacion_backend(self) -> None: ...
    def recibir_resultados_busqueda(self) -> list: ...
